{"version":3,"sources":["webpack:///./src/pages/reading-the-emoji-in-the-eyes-test.js"],"names":["ReadingTheEmojiInTheEyesTestPage","data","React","useState","status","setStatus","score","setScore","question","setQuestion","Math","floor","random","emojiList","length","correctIndex","setCorrectIndex","usedIndexes","setUsedIndex","lastCorrect","setLastCorrect","getIncorrectIndices","randomList","indexOf","push","incorrectIndices","setIncorrectIndices","answer","newCorrectIndex","incorrectAnswer","optionButtons","className","onClick","splice","title","style","textAlign","padding","marginBottom","border","backgroundColor","borderRadius","marginTop","color","position","background","left","width","height","transform","fontSize"],"mappings":"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","file":"component---src-pages-reading-the-emoji-in-the-eyes-test-js-d7c71bc20b798cfdad68.js","sourcesContent":["import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport emojiList from '../data/emoji-list.json';\nimport \"../components/custom.css\"\n\n\nconst ReadingTheEmojiInTheEyesTestPage = ({ data }) => {\n\n  const [status, setStatus] = React.useState(0)\n  const [score, setScore] = React.useState(0)\n  const [question, setQuestion] = React.useState(1)\n  const [correctIndex, setCorrectIndex] = React.useState(Math.floor(Math.random() * emojiList.length))\n  const [usedIndexes, setUsedIndex] = React.useState([correctIndex])\n  const [lastCorrect, setLastCorrect] = React.useState(false)\n\n  const getIncorrectIndices = () => {\n    const randomList = []\n    while (randomList.length < 3) {\n      const random = Math.floor(Math.random() * emojiList.length)\n      if (randomList.indexOf(random) === -1 && correctIndex !== random) {\n        randomList.push(random)\n      }\n    }\n    return randomList\n  }\n\n  const [incorrectIndices, setIncorrectIndices] = React.useState(getIncorrectIndices())\n\n  const answer = () => {\n    setQuestion(question + 1)\n    newCorrectIndex()\n    setIncorrectIndices(getIncorrectIndices())\n    if (question === 36) {\n      setStatus(2)\n    }\n  }\n  const correctAnswer = () => {\n    setScore(score + 1)\n    setLastCorrect(true)\n    answer()\n  }\n  const incorrectAnswer = () => {\n    setLastCorrect(false)\n    answer()\n  }\n  const newCorrectIndex = () => {\n    while (true) {\n      const random = Math.floor(Math.random() * emojiList.length)\n      if (usedIndexes.indexOf(random) === -1) {\n        setCorrectIndex(random)\n        setUsedIndex(usedIndexes + [random])\n        break\n      }\n    }\n  }\n  const renderResult = () => {\n    if (score < 10) return \"You really should have gotten more than just the cats. 👎👎👎\"\n    if (score < 20) return \"You understand the basics of emoji emotion. Some day, with enough training, you could learn to love them. 👍👍👍\"\n    if (score < 30) return \"You relate a lot to these emoji. You understand their joys and their losses. But still, they conceal a rich inner life that you can't quite reach. 🙌🙌🙌\"\n    return \"You are a true emoji empath. Congratulations. 👏👏👏\"\n  }\n\n  var optionButtons = [\n    <><button className=\"red-button\" onClick={incorrectAnswer}>{emojiList[incorrectIndices[0]][\"Description\"]}</button><br /></>,\n    <><button className=\"red-button\" onClick={incorrectAnswer}>{emojiList[incorrectIndices[1]][\"Description\"]}</button><br /></>,\n    <><button className=\"red-button\" onClick={incorrectAnswer}>{emojiList[incorrectIndices[2]][\"Description\"]}</button><br /></>,\n  ]\n  optionButtons.splice(Math.floor(Math.random() * optionButtons.length), 0, <><button className=\"red-button\" onClick={correctAnswer}>{emojiList[correctIndex][\"Description\"]}</button><br /></>)\n\n  return <Layout>\n    <SEO title=\"Reading the Emoji in the Eyes Test\" />\n    <h1>Reading the Emoji in the Eyes</h1>\n\n    <p>Are you an emoji empath? A smiley sympathiser? An icon intuiter? Take this adaptation of the \"Reading the Mind in the Eyes Test\" to find out!</p>\n\n    <p>The goal is simple: select whichever option best describes the emotions of the emoji shown.</p>\n\n    <div style={{ textAlign: \"center\", padding: \"0px 10px 20px 10px\", marginBottom: \"200px\", border: \"1px solid #00000055\", backgroundColor: \"#00000005\", borderRadius: \"20px\" }}>\n      {\n        status === 0 && <button style={{ marginTop: \"20px\" }} className=\"red-button\" onClick={() => (setStatus(1))}>Begin</button>\n      }\n\n      {\n        status === 1 &&\n        <><h2>Question: {question}/36</h2>\n\n          <span><b>Last Answer:</b> {question === 1 ? \" - \" : lastCorrect ? <span style={{ color: \"green\" }}>Correct</span> : <span style={{ color: \"red\" }}>Incorrect</span>}</span><br />\n          <span><b>Running Score:</b> {score}/{question - 1}</span>\n\n          <div style={{ position: \"relative\" }}>\n            <div style={{ background: \"#000000\", left: \"50%\", width: \"100px\", height: \"35px\", position: \"absolute\", transform: \"translate(-50px,15px)\" }}></div>\n            <div style={{ background: \"#000000\", left: \"50%\", width: \"100px\", height: \"35px\", position: \"absolute\", transform: \"translate(-50px,80px)\" }}></div>\n            <span style={{ fontSize: \"100px\" }}> {emojiList[correctIndex][\"Emoji\"]}</span>\n          </div>\n          {optionButtons}\n\n        </>\n      }\n\n      {\n        status === 2 && <>\n          <h3>Complete! Your final score was {score}/36</h3>\n          <p>{renderResult()}</p>\n        </>\n      }\n    </div>\n  </Layout >\n}\n\nexport default ReadingTheEmojiInTheEyesTestPage\n"],"sourceRoot":""}